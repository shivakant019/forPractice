Day 4 task:
 


Assignment Tasks : 

1. Write a method void printArray(int[][]arr)

Prints array elements clockwise and anti-clockwise alternatively.

Input : 

 1 2 3

 4 5 6

 7 8 9

Output :

1 2 3 6 9 8 7 4 5

3 2 1 4 7 8 9 6 5


2. Write a program to print all the possible combinations according to the input values.

Example :

Given Values

'1' : ['Z', 'Y', 'A'],

'2' : ['B', 'O'],

'12' : ['L']

'3' : ['U', 'P']


Input: 123
Output : [ZBU, ZBP, ZOU, ZOP, YBU, YBP, YOU, YOP, ABU, ABP, AOU, AOP, LU, LP]



 


3. Write an efficient algorithm that searches for a value in a m x n matrix. This matrix has the following properties:



 


	
Integers in each row are sorted from left to right.
	
The first integer of each row is greater than the last integer of the previous row.


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true


	
m == matrix.length
	
n == matrix[i].length
	
1 <= m, n <= 100
	
-104 <= matrix[i][j], target <= 104

4. Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.



 


An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.



Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

5. You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.



 



 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:


Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]


	
n == matrix.length == matrix[i].length
	
1 <= n <= 20
	
-1000 <= matrix[i][j] <= 1000